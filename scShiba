#!/bin/bash -e
set -o pipefail
# Prevent commands misbehaving due to locale differences
export LC_ALL=C

VERSION="v0.3"


function usage {
    cat << EOS

scShiba ${VERSION} -Pipeline for robust identification of differential RNA splicing in single-cell RNA-seq-

Usage: $(basename "$0") -i experiment.tsv -c config.txt

    -h  Display help
    -v  Show version
    -i  Experiment table
    -c  Config file

EOS
    exit 2
}

# version
function version {
    cat << EOS

scShiba ${VERSION} -Pipeline for robust identification of differential RNA splicing in single-cell RNA-seq-

EOS
    exit 2
}

# path to src
SRC_PATH=$(dirname "$0")

function lack_of_necessary_param() {
    usage
    exit 1
}

IS_THERE_NECESSARY_OPT_i=false
IS_THERE_NECESSARY_OPT_c=false

while getopts "i:c:vh" optKey; do
    case "$optKey" in
    i)
        IS_THERE_NECESSARY_OPT_i=true
        EXPERIMENT_TABLE=${OPTARG}
        ;;
    c)
        IS_THERE_NECESSARY_OPT_c=true
        CONFIG=${OPTARG}
        ;;
    v|version)
        version
        ;;
    h|* )
        usage
        ;;
    esac
done


if [ "${IS_THERE_NECESSARY_OPT_i}" == false ] || [ "${IS_THERE_NECESSARY_OPT_c}" == false ]; then
    lack_of_necessary_param
fi;

# source config file
source ${CONFIG}


# Make log file
mkdir -p ${OUTPUT}
rm -rf ${OUTPUT}/scShiba.log
touch ${OUTPUT}/scShiba.log
exec 1> >(tee -a ${OUTPUT}/scShiba.log)


cat << "EOF"

              ____    __          __
             /\  _`\ /\ \      __/\ \
  ____    ___\ \,\L\_\ \ \___ /\_\ \ \____     __
 /',__\  /'___\/_\__ \\ \  _ `\/\ \ \ '__`\  /'__`\
/\__, `\/\ \__/ /\ \L\ \ \ \ \ \ \ \ \ \L\ \/\ \L\.\_
\/\____/\ \____\\ `\____\ \_\ \_\ \_\ \_,__/\ \__/.\_\
 \/___/  \/____/ \/_____/\/_/\/_/\/_/\/___/  \/__/\/_/
EOF


# Check if the config file exists
if [ ! -f ${CONFIG} ]; then
    echo -e "Config file does not exist."
    exit 1
fi

# Check if the experiment table exists
if [ ! -f ${EXPERIMENT_TABLE} ]; then
    echo -e "Barcode table does not exist."
    exit 1
fi

# Check if the NUM_PROCESS variable and OUTPUT variable are set
if [ -z ${NUM_PROCESS} ]; then
    echo -e "NUM_PROCESS is not set. Set to 1."
    NUM_PROCESS=1
fi
if [ -z ${OUTPUT} ]; then
    echo -e "OUTPUT is not set. Plesae set the output directory."
    exit 1
fi
if [ -z ${GTF} ]; then
    echo -e "GTF is not set. Please specify in the config file."
    exit 1
fi
# Check if the GTF exists
if [ ! -f ${GTF} ]; then
    echo -e ""
    echo -e "${GTF} does not exist."
    echo -e "Please specify the correct GTF file in the config file."
    exit 1
fi

# Check if the variables are set
if [ -z ${ONLY_PSI} ]; then
    echo -e "ONLY_PSI is not set. Set to false."
    ONLY_PSI=false
fi

# execution time
SECONDS=0

# Get absolute path
EXPERIMENT_TABLE_ABSPATH=$(cd $(dirname ${EXPERIMENT_TABLE}); pwd)/$(basename ${EXPERIMENT_TABLE})
CONFIG_ABSPATH=$(cd $(dirname ${CONFIG}); pwd)/$(basename ${CONFIG})
OUTPUT_ABSPATH=$(cd $(dirname ${OUTPUT}); pwd)/$(basename ${OUTPUT})

# print parameters
echo -e "
${VERSION}
Input:\t${EXPERIMENT_TABLE_ABSPATH}
Config:\t${CONFIG_ABSPATH}
CPU:\t${NUM_PROCESS}
GTF:\t${GTF}
Output:\t${OUTPUT_ABSPATH}"


## Step1: gtf2event.py
echo -e "
----------------------------
    Step1: gtf2event.py
----------------------------
"
if [ "${SKIP_STEP1}" == false ]; then

    STEP1_COMMAND="python ${SRC_PATH}/src/gtf2event.py -i ${GTF} -o ${OUTPUT}/events -p ${NUM_PROCESS}"
    echo -e "${STEP1_COMMAND}"
    ${STEP1_COMMAND}

else

	echo -e "Skipped."

fi

i_one=${SECONDS}
sec=$((i_one % 60))
min=$(((i_one % 3600) / 60))
hrs=$((i_one / 3600))
timestamp=$(printf "%d:%02d:%02d" "$hrs" "$min" "$sec")

echo -e "Step1 execution time: ${timestamp}"

## Step2: sc2junc.py
echo -e "
----------------------------
    Step2: sc2junc.py
----------------------------
"
if [ "${SKIP_STEP2}" == false ]; then

    STEP2_COMMAND="python ${SRC_PATH}/src/sc2junc.py -i ${EXPERIMENT_TABLE_ABSPATH} -o ${OUTPUT}/junctions/junctions.bed"
    echo -e "${STEP2_COMMAND}"
    ${STEP2_COMMAND}

else

	echo -e "Skipped."

fi

i_two=$((${SECONDS} - ${i_one}))
sec=$((i_two % 60))
min=$(((i_two % 3600) / 60))
hrs=$((i_two / 3600))
timestamp=$(printf "%d:%02d:%02d" "$hrs" "$min" "$sec")

echo -e "Step2 execution time: ${timestamp}"

# Step3: scpsi.py
echo -e "
----------------------------
    Step3: scpsi.py
----------------------------
"
if [ "${SKIP_STEP3}" == false ]; then

	# Check if the variables are set
	if [ -z ${REFERENCE_GROUP} ]; then
		echo -e "REFERENCE_GROUP is not set. Please specify in the config file."
		exit 1
	fi
	if [ -z ${ALTERNATIVE_GROUP} ]; then
		echo -e "ALTERNATIVE_GROUP is not set. Please specify in the config file."
		exit 1
	fi

	if [ "${ONLY_PSI}" == true ]; then

        STEP3_COMMAND_1="python ${SRC_PATH}/src/scpsi.py -p 1 -r ${REFERENCE_GROUP} -a ${ALTERNATIVE_GROUP} --onlypsi ${OUTPUT}/junctions/junctions.bed ${OUTPUT}/events ${OUTPUT}/results"
        echo -e "${STEP3_COMMAND_1}"
        ${STEP3_COMMAND_1}

	else

		# Check if the variables are set
        if [ -z ${FDR} ]; then
            echo -e "FDR is not set. Please specify in the config file."
            exit 1
        fi
        if [ -z ${DELTA_PSI} ]; then
            echo -e "DELTA_PSI is not set. Please specify in the config file."
            exit 1
        fi
        if [ -z ${MINIMUM_READS} ]; then
            echo -e "MINIMUM_READS is not set. Please specify in the config file."
            exit 1
        fi

        STEP3_COMMAND_2="python ${SRC_PATH}/src/scpsi.py -p 1 -r ${REFERENCE_GROUP} -a ${ALTERNATIVE_GROUP} -f ${FDR} -d ${DELTA_PSI} -m ${MINIMUM_READS} ${OUTPUT}/junctions/junctions.bed ${OUTPUT}/events ${OUTPUT}/results"
        echo -e "${STEP3_COMMAND_2}"
        ${STEP3_COMMAND_2}

	fi

else

	echo -e "Skipped."

fi

i_three=$((${SECONDS} - ${i_two} - ${i_one}))
sec=$((i_three % 60))
min=$(((i_three % 3600) / 60))
hrs=$((i_three / 3600))
timestamp=$(printf "%d:%02d:%02d" "$hrs" "$min" "$sec")

echo -e "Step3 execution time: ${timestamp}"

i=${SECONDS}
sec=$((i % 60))
min=$(((i % 3600) / 60))
hrs=$((i / 3600))
timestamp=$(printf "%d:%02d:%02d" "$hrs" "$min" "$sec")

echo -e \
"
Finished scShiba!
Total execution time: ${timestamp}
"
